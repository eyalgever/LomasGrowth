/*#pragma kernel CSMain
 
AppendStructuredBuffer<float3> buffer;
float size;
 
[numthreads(MAX_LINKS,MAX_LINKS,MAX_LINKS)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 center = float3(id / size);
    buffer.Append(center);
}
*/

#define BLOCKSIZE 256
#define MAX_LINKS 16

#pragma kernel GenerateMesh
#pragma kernel Collision
#pragma kernel Normal
#pragma kernel Bulge
#pragma kernel Plane
#pragma kernel Spring
#pragma kernel Split
#pragma kernel Integrate

// uniforms 
float _maxNeighbors;
float _radius;
float _collisionFactor;
float _bulgeFactor;
float _springFactor;
float _springLength;
float _planarFactor;
float _dampening;
float _foodExponent;
float _threshold;
uint _numParticles;
uint _frameNum;

struct Particle
{
    int links[MAX_LINKS];
    int numLinks;
    int age;
    float food;
    float curvature;
    float3 position;
    float3 delta;
    float3 normal;
};

struct Vertex
{
    float3 vPosition;
    float3 vNormal;
    float food;
    float curvature;
};

struct Triangle
{
    Vertex v[3];
};

AppendStructuredBuffer<Triangle> TriangleAppendBufffer;
RWStructuredBuffer<Particle> ParticleRWBuffer;


int GetNext(int p, int previousIndex, int currentIndex)
{
    Particle current = ParticleRWBuffer[currentIndex];
    Particle thisParticle = ParticleRWBuffer[p];

    for (int i = 0; i < thisParticle.numLinks; i++)  {
        for (int j = 0; j < current.numLinks; j++)  {

            if ((thisParticle.links[i] == current.links[j]) &&
                (thisParticle.links[i] != previousIndex) && 
                (thisParticle.links[i] != currentIndex))  {

                return thisParticle.links[i];
            }
        }
    }

    return -19;
}

int GetNext(int p, int i)
{
    return GetNext(p, i, i);
}


int orientation(float3 p1, float3 p2, float3 p3)
{
    float val = (p2.y - p1.y) * (p3.x - p2.x) -
                (p2.x - p1.x) * (p3.y - p2.y);
  
    if (val == 0)
        return 0; 
  
    return (val > 0) ? -1 : 1;  
}

int FindNextLink (int a, int b, int last)
{
    Particle center = ParticleRWBuffer[a];
    Particle arm = ParticleRWBuffer[b];

 
    for (int j = 0; j < arm.numLinks; j++)
    {
        int possibleNext = arm.links[j];
        for (int k = 0; k < center.numLinks; k++)
        {
            if (center.links[k] == possibleNext && possibleNext != last)
                return possibleNext;
        }
    }
    
    return -99;

}

void ReverseLinks(int p)
{
    return;
    Particle part = ParticleRWBuffer[p];
     
    for (int i = 0; i < MAX_LINKS / 2; i++)
    {
        if (i >= part.numLinks / 2)
            break;

        int tmp = part.links[i];
        ParticleRWBuffer[p].links[i] = part.links[part.numLinks - 1 - i];
        ParticleRWBuffer[p].links[part.numLinks - 1 - i] = tmp;
    }
}

void OrderLinks2(int p)
{
    if (ParticleRWBuffer[p].numLinks < 3)
        return;

    int orderedLinks[MAX_LINKS];

    orderedLinks[0] = ParticleRWBuffer[p].links[0];
    orderedLinks[1] = FindNextLink(p, orderedLinks[0], -1);

    for (int i = 2; i < ParticleRWBuffer[p].numLinks; i++)
    {
        orderedLinks[i] = FindNextLink(p, orderedLinks[i - 1], orderedLinks[i - 2]);
    }

    for (int j = 0; j < ParticleRWBuffer[p].numLinks; j++)
    {
        ParticleRWBuffer[p].links[j] = orderedLinks[j];
    }
    
 /*   if (orientation(
            ParticleRWBuffer[orderedLinks[0]].position,
            ParticleRWBuffer[orderedLinks[1]].position,
            ParticleRWBuffer[orderedLinks[2]].position) == -1)
    {
        ReverseLinks(p);
    }
   */ 
}

void OrderLinks(int p)
{
    if (ParticleRWBuffer[p].numLinks < 3)
        return;
    
    int orderedLinks[MAX_LINKS];

    orderedLinks[0] = ParticleRWBuffer[p].links[0];
    orderedLinks[1] = GetNext(p, ParticleRWBuffer[p].links[0]);

    for (int i = 2; i < ParticleRWBuffer[p].numLinks; i++)
    {
        orderedLinks[i] = GetNext(p, orderedLinks[i - 2], orderedLinks[i - 1]);
    }

    for (int j = 0; j < ParticleRWBuffer[p].numLinks; j++)
    {
        ParticleRWBuffer[p].links[j] = orderedLinks[j];
    }
}

[numthreads(BLOCKSIZE, 1, 1)]
void GenerateMesh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _numParticles)
        return;

    Particle p = ParticleRWBuffer[id.x];

    int originalOrderedLinks[MAX_LINKS];
    int numLinksOriginal = p.numLinks;
    originalOrderedLinks[0] = p.links[0];
    originalOrderedLinks[1] = GetNext(id.x, p.links[0]);

    for (int k = 2; k < p.numLinks; k++)
    {
        originalOrderedLinks[k] = GetNext(
            id.x,
            originalOrderedLinks[k - 2],
            originalOrderedLinks[k - 1]);
    }


    for (int i = 0; i < p.numLinks; i++)
    { 
        
        Particle p1 = ParticleRWBuffer[originalOrderedLinks[i]];
        Particle p2 = ParticleRWBuffer[originalOrderedLinks[(i + 1) % (float) p.numLinks]];

        Triangle t;

        Vertex v0;
        Vertex v1;
        Vertex v2;

        v0.vPosition = p.position;
        v1.vPosition = p1.position;
        v2.vPosition = p2.position;
        
        float oo = orientation(p.position, p1.position, p2.position);

        float3 pp1 = normalize(p2.position - p.position);
        float3 pp2 = normalize(p1.position - p.position);
        float3 normal = normalize(oo * cross(pp1, pp2));

        v0.vNormal = normal;
        v1.vNormal = normal;
        v2.vNormal = normal;

        t.v[0] = v0;
        t.v[1] = v1;
        t.v[2] = v2;

        t.v[0].food = p.food;
        t.v[1].food = p1.food;
        t.v[2].food = p2.food;

        t.v[0].curvature = p.curvature;
        t.v[1].curvature = p1.curvature;
        t.v[2].curvature = p2.curvature;

        TriangleAppendBufffer.Append(t);
    }
}

bool isConnected(int i, int j)
{
    Particle p = ParticleRWBuffer[i];

    for (int k = 0; k < p.numLinks; k++)
    {
        if (p.links[k] == j)
            return true;
    }
    return false;
}

groupshared Particle sharedParticles[BLOCKSIZE];


[numthreads(BLOCKSIZE, 1, 1)]
void Collision(uint id : SV_DispatchThreadID)
{
    if (id.x < _numParticles)
    {
        Particle p = ParticleRWBuffer[id.x];
        float r2 = max(0.001f, _radius * _radius);

        for (int i = 0; i < _numParticles; i++)
        {
            if (i != id.x && !isConnected(i, id.x))
            {
                float3 displacement = (p.position - ParticleRWBuffer[i].position);
                float d2 = dot(displacement, displacement);

                if (length(displacement) < _radius)
                {
                    displacement = normalize(displacement);
                    displacement *= (r2 - d2) / r2;

                    p.delta += displacement * _collisionFactor;
                }
            }
        }

        ParticleRWBuffer[id.x] = p;
    }
}

void CalculateNormal(int index)
{
    float3 tmpNormal = (float3) 0.0;
    Particle p = ParticleRWBuffer[index];
    
    int originalOrderedLinks[MAX_LINKS];
    int numLinksOriginal = p.numLinks;
    originalOrderedLinks[0] = p.links[0];
    originalOrderedLinks[1] = GetNext(index, p.links[0]);

    for (int k = 2; k < p.numLinks; k++)
    {
        originalOrderedLinks[k] = GetNext(
            index,
            originalOrderedLinks[k - 2],
            originalOrderedLinks[k - 1]);
    }
    
    for (uint i = 0; i < p.numLinks; i++)
    {
        float3 c = ParticleRWBuffer[originalOrderedLinks[i]].position;
        float3 d = ParticleRWBuffer[originalOrderedLinks[(i + 1) % p.numLinks]].position;

        if (-1 == orientation(
            p.position,
            ParticleRWBuffer[originalOrderedLinks[0]].position,
            ParticleRWBuffer[originalOrderedLinks[1]].position))
        {
            ParticleRWBuffer[index].normal = -ParticleRWBuffer[index].normal;
        }

        tmpNormal += cross(d, c);
    }

    ParticleRWBuffer[index].normal = normalize(tmpNormal);
}

[numthreads(BLOCKSIZE, 1, 1)]
void Normal(uint id : SV_DispatchThreadID)
{
    if (id.x < _numParticles)
    {
        CalculateNormal(id.x);
    }
}

[numthreads(BLOCKSIZE, 1, 1)]
void Bulge(uint id : SV_DispatchThreadID)
{
    if (id.x < _numParticles)
    {
        Particle p = ParticleRWBuffer[id.x];

        float bulgeDistance = 0;
        float sprLength2 = _springLength * _springLength;

        for (uint i = 0; i < p.numLinks; i++)
        {
            float3 pos_i = ParticleRWBuffer[p.links[i]].position;
            float dist = length(pos_i - p.position);

            if (dist < _springLength)
            {
                bulgeDistance += (_springLength - dist);
            }
        }

        bulgeDistance /= p.numLinks;
            
        p.delta += -p.normal * bulgeDistance * _bulgeFactor;
        ParticleRWBuffer[id.x] = p;
    }
}

[numthreads(BLOCKSIZE, 1, 1)]
void Plane(uint id : SV_DispatchThreadID)
{
    if (id.x < _numParticles)
    {
        Particle p = ParticleRWBuffer[id.x];
        float3 planarTarget = (float3) 0.0;

        for (uint i = 0; i < p.numLinks; ++i)
        {
            planarTarget += ParticleRWBuffer[p.links[i]].position;
        }

        planarTarget /= p.numLinks;
        planarTarget = planarTarget - p.position;

        p.curvature = -1.0 * length(planarTarget) *
                          dot(p.normal, normalize(planarTarget));

        p.delta += planarTarget * _planarFactor;

        p.food += pow(max(p.curvature / 20.0 , 0.00001f),  _foodExponent);

        ParticleRWBuffer[id.x] = p;
    }
}

[numthreads(BLOCKSIZE, 1, 1)]
void Spring(uint id : SV_DispatchThreadID)
{
    if (id.x < _numParticles)
    {
        Particle p = ParticleRWBuffer[id.x];

        float3 target = (float3) 0.0;
        for (uint i = 0; i < p.numLinks; i++)
        {
            Particle q = ParticleRWBuffer[p.links[i]];
            float3 d = q.position + _springLength * normalize(p.position - q.position);
            target += d;
        }

        target /= p.numLinks;
        target -= p.position;

        ParticleRWBuffer[id.x].delta += target * _springFactor;
    }
}

int FindLongestEdge(const Particle p)
{
    float longest = 0;
    int longestIndex = -20;
    for (int i = 0; i < p.numLinks; i++)
    {
        float distance = length(p.position - ParticleRWBuffer[p.links[i]].position);
        if ( distance > longest)
        {
            longest = distance;
            longestIndex = i;
        }
    }

    return longestIndex;
}

int FindLongestAxis(const Particle p)
{
    float minLength =  1e10;
    int shortest = -20;
    for (int i = 0; i < p.numLinks; i++)
    {
        float distance = length(p.position - ParticleRWBuffer[p.links[i]].position);
        int opposite = (i + (p.numLinks / 2)) % p.numLinks;
        distance += length(p.position - ParticleRWBuffer[p.links[opposite]].position);
        if (distance < minLength || i == 0)
        {
            minLength = distance;
            shortest  =  i;
        }
    }
    return shortest;
}

void AddLink(int index, int toAdd)
{
    // already has the link???
    for (int k = 0; k < ParticleRWBuffer[index].numLinks; k++)
    {
        if (ParticleRWBuffer[index].links[k] == toAdd)
            return;
    }

    if (ParticleRWBuffer[index].numLinks < MAX_LINKS - 1)
    {
        ParticleRWBuffer[index].links[ParticleRWBuffer[index].numLinks] = toAdd;
        ParticleRWBuffer[index].numLinks++;
    }
}

void RemoveLink(int index, int toRemove)
{
    for (int i = 0; i < ParticleRWBuffer[index].numLinks; i++)
    {
        if (ParticleRWBuffer[index].links[i] == toRemove)
        {
            // shift back
            for (int j = i; j < ParticleRWBuffer[index].numLinks - 1 ; j++)
            {
                ParticleRWBuffer[index].links[j] = ParticleRWBuffer[index].links[j + 1];
            }

            //zero this out for debugging
            ParticleRWBuffer[index].links[ParticleRWBuffer[index].numLinks - 1] = -11;
            ParticleRWBuffer[index].numLinks--;
            return;
        }
    }
}

void ReplaceLink(int target, int old_index, int new_index)
{
    Particle p = ParticleRWBuffer[target];
    for (int i = 0; i < p.numLinks; i++)
    {
        if (p.links[i] == old_index)
        {
            ParticleRWBuffer[target].links[i] = new_index;
            return;
        }
    }
}

void SetLinksNew(int p_index, int b_index)
{
    // get Neighbor with Lowest degree
    int lowestDegree = 99999;
    int neighborWithLowestDegree = -1;
    int neighborLinkIndexWithLowestDegree = -1;
    Particle p = ParticleRWBuffer[p_index];

    for (int i = 0; i < p.numLinks; i ++)
    {
        if (ParticleRWBuffer[p.links[i]].numLinks < lowestDegree )
        {
            lowestDegree = ParticleRWBuffer[p.links[i]].numLinks;
            neighborWithLowestDegree = p.links[i];
            neighborLinkIndexWithLowestDegree = i;

        }
    }

    AddLink(b_index, neighborWithLowestDegree);
    AddLink(neighborWithLowestDegree, b_index);

    for (int j = neighborLinkIndexWithLowestDegree + 1; 
        j < neighborLinkIndexWithLowestDegree + p.numLinks / 2  ; j++)
    {
        ReplaceLink(p.links[j % p.numLinks], p_index, b_index);
    }
    
    int oppositeLinkIndex = p.links[(neighborLinkIndexWithLowestDegree + p.numLinks / 2) % p.numLinks];

    AddLink(b_index, oppositeLinkIndex);
    AddLink(oppositeLinkIndex, b_index);
    
    AddLink(p_index, b_index);
    AddLink(b_index, p_index);
}

int FindLeastNeighbor(Particle p)
{
    int maxNeighbors = 99999;
    int maxIndex = -1;

    for (int i = 0; i < p.numLinks; i++)
    {
        if (ParticleRWBuffer[p.links[i]].numLinks < maxNeighbors)
        {
            maxNeighbors = ParticleRWBuffer[p.links[i]].numLinks;
            maxIndex = p.links[i];
        }
    }

    return maxIndex;

}

void SetLinks (int p_index, int b_index)
{
    //int firstIndex = FindLongestAxis(ParticleRWBuffer[p_index]);

    int firstIndex = FindLeastNeighbor(ParticleRWBuffer[p_index]);

    int originalOrderedLinks[MAX_LINKS];
    int numLinksOriginal = ParticleRWBuffer[p_index].numLinks;
    originalOrderedLinks[0] = firstIndex;
    originalOrderedLinks[1] = GetNext(p_index, firstIndex, firstIndex);

    for (int k = 2; k < ParticleRWBuffer[p_index].numLinks; k++)
    {
        originalOrderedLinks[k] = GetNext(
            p_index,
            originalOrderedLinks[k - 2],
            originalOrderedLinks[k - 1]);
    }

    for (int i = 0; i <= numLinksOriginal / 2; i++)
    {
        AddLink(b_index, originalOrderedLinks[i]);
        AddLink(originalOrderedLinks[i], b_index);

        if (i != 0 && i != numLinksOriginal / 2)
        {
            RemoveLink(p_index, originalOrderedLinks[i]);
            RemoveLink(originalOrderedLinks[i], p_index);
        }
    }

    AddLink(p_index, b_index);
    AddLink(b_index, p_index);

}

void SetPositions(int p_index, int b_index)
{
    float3 babyAverage = ParticleRWBuffer[p_index].position;
    for (int i = 0; i < ParticleRWBuffer[b_index].numLinks; ++i)
    {
        babyAverage += ParticleRWBuffer[ParticleRWBuffer[b_index].links[i]].position;
    }

    babyAverage /= ParticleRWBuffer[b_index].numLinks + 1;

    float3 parentAverage = ParticleRWBuffer[p_index].position;
    for (int j = 0; j < ParticleRWBuffer[p_index].numLinks; ++j)
    {
        parentAverage += ParticleRWBuffer[ParticleRWBuffer[p_index].links[j]].position;
    }

    parentAverage /= ParticleRWBuffer[p_index].numLinks + 1;

    // set positions
    ParticleRWBuffer[b_index].position = babyAverage;
    ParticleRWBuffer[p_index].position = parentAverage;
}


void DoSplit(int p_index)
{
    // Copy the particle for its baby
    Particle baby;
    baby.numLinks = 0;
    baby.food = 0;

    // zero out links for baby
    for (int j = 0; j < MAX_LINKS; ++j)
    {
        baby.links[j] = -2;
    }

    baby.age = 0;
    baby.food = 0;
    baby.curvature = 0;
    baby.position = 0;
    baby.delta = 0;
    baby.normal = 0;

    ParticleRWBuffer[_numParticles] = baby;

    int baby_index = _numParticles;
    ParticleRWBuffer[p_index].food = 0;
    
    SetLinks(p_index, baby_index);
    SetPositions(p_index, baby_index);

    ParticleRWBuffer.IncrementCounter();
}

[numthreads(BLOCKSIZE, 1, 1)]
void Split(uint id : SV_DispatchThreadID)
{
    if (id.x < _numParticles)
    {
        if ((ParticleRWBuffer[id.x].food > _threshold || ParticleRWBuffer[id.x].numLinks > 8) &&
             _frameNum % _numParticles == id.x)
        {
            DoSplit(id.x);
        }
    }

}

[numthreads(BLOCKSIZE, 1, 1)]
void Integrate(uint id : SV_DispatchThreadID)
{
    if (id.x < _numParticles)
    {
        Particle p = ParticleRWBuffer[id.x];
        p.position += p.delta * _dampening;
        p.delta = (float3) 0.0;
        ParticleRWBuffer[id.x] = p;
    }
}

